#!/usr/bin/env fontforge
# -*- mode: python; coding: utf-8 -*-

import fontforge
import argparse
import os
import re
import string
import sys

hexPrefixRegex = r'(?:[Uu]\+?|0?[Xx])'
hexDigitsRegex = r'[0-9A-Fa-f]+'
fromRegex = '%s(?P<from>%s)' % (hexPrefixRegex, hexDigitsRegex)
toRegex   = '%s(?P<to>%s)' % (hexPrefixRegex, hexDigitsRegex)
hexRangeRegex = r'^%s(?:-%s)?$' % (fromRegex, toRegex)

class FontForgeScript:
    def __init__(self, args):
        self.sourceFilename   = None
        self.destFilename     = None
        self.noHints          = False
        self.omitInstructions = False
        self.encodeUnicode    = False
        self.noOS2Vendor      = False
        self.lineHeight       = None
        self.fontName         = None
        self.familyName       = None
        self.fullName         = None
        self.version          = None
        self.sfntRevision     = None
        self.font             = None
        self.gridSize         = None
        self.width            = None
        if args != None:
            self.setFromArgs(args)
    def run(self):
        self.load()
        self.runTasks()
        self.save()
    def runTasks(self):
        if not self.noOS2Vendor:
            self.font.os2_vendor = 'PfEd'
        if self.encodeUnicode:
            self.font.encoding = 'iso10646-1'

        if self.args.em != None:
            self.font.em = self.args.em
        if self.args.ascent != None:
            self.font.ascent = self.args.ascent
        if self.args.descent != None:
            self.font.descent = self.args.descent
        if self.args.underline_position != None:
            self.font.upos = self.args.underline_position
        if self.args.underline_height != None:
            self.font.uwidth = self.args.underline_height
        if self.args.grid_size != None:
            self.gridSize = args.grid_size
        if self.args.width != None:
            self.width = args.width

        self.setMetrics()
        self.updateGuides()
        self.setNames()

        if self.args.no_hints_on != None:
            self.noHintsOn()
        if self.width:
            self.setWidth(self.width)
    def load(self):
        if self.sourceFilename == 'NEW':
            self.font = fontforge.font()
        else:
            self.font = fontforge.open(self.sourceFilename)
    def save(self):
        filename = self.destFilename
        if not filename:
            filename = self.sourceFilename
        if re.search(r'\.sfd$', filename):
            self.font.save(filename)
        else:
            flags = ['opentype']
            if self.noHints:
                flags += ['no-hints']
            if self.omitInstructions:
                flags += ['omit-instructions']
            flags = tuple(flags)
            self.font.generate(filename, flags = flags)
    def setFromArgs(self, args):
        self.args             = args
        self.sourceFilename   = args.source_filename
        self.destFilename     = args.dest_filename
        self.lineHeight       = args.line_height
        self.fontName         = args.font_name
        self.familyName       = args.family_name
        self.fullName         = args.full_name
        self.version          = args.version
        self.sfntRevision     = args.sfnt_revision
        self.noHints          = args.no_hints
        self.omitInstructions = args.omit_instructions
        self.encodeUnicode    = args.encode_unicode
        self.noOS2Vendor      = args.no_os2_vendor
        self.lineHeight       = args.line_height
    def setNames(self):
        if self.fontName != None:
            if "%s" in self.fontName:
                self.font.fontname = self.fontName % self.font.fontname
            else:
                self.font.fontname = self.fontName
            print(self.font.fontname)
        if self.familyName != None:
            if "%s" in self.familyName:
                self.font.familyname = self.familyName % self.font.familyname
            else:
                self.font.familyname = self.familyName
            print(self.font.familyname)
        if self.fullName != None:
            if "%s" in self.fullName:
                self.font.fullname = self.fullName % self.font.fullname
            else:
                self.font.fullname = self.fullName
            print(self.font.fullname)
        if self.version != None:
            self.font.version = self.version
        if self.sfntRevision != None:
            self.font.sfntRevision = self.sfntRevision
    def setMetrics(self):
        if self.lineHeight != None:
            height = self.font.em
            finalHeight = int(0.5 + self.lineHeight * height)
            add = finalHeight - height
            addAscent = int(0.5 + 1.0 * add / 2)
            addDescent = add - addAscent
            finalAscent = self.font.ascent + addAscent
            finalDescent = self.font.descent + addDescent
            sys.stderr.write("BEFORE: hhea %d/%d typo %d/%d win %d/%d\n" % (
                self.font.hhea_ascent, self.font.hhea_descent,
                self.font.os2_typoascent, self.font.os2_typodescent,
                self.font.os2_winascent, self.font.os2_windescent
            ))
            self.font.hhea_ascent     = finalAscent
            self.font.os2_typoascent  = finalAscent
            self.font.os2_winascent   = finalAscent
            self.font.hhea_descent    = -finalDescent
            self.font.os2_typodescent = -finalDescent
            self.font.os2_windescent  = finalDescent
            sys.stderr.write("AFTER: hhea %d/%d typo %d/%d win %d/%d\n" % (
                self.font.hhea_ascent, self.font.hhea_descent,
                self.font.os2_typoascent, self.font.os2_typodescent,
                self.font.os2_winascent, self.font.os2_windescent
            ))
    def updateGuides(self):
        for contour in self.font.guide:
            if contour.name:
                print("%r" % contour.name)
        if self.args.clear_guides:
            self.clearGuides()
        if self.args.horizontal_guides != None:
            self.setHorizontalGuides(self.args.horizontal_guides)
        if self.args.vertical_guides != None:
            self.setVerticalGuides(self.args.vertical_guides)
        if self.args.grid_size != None:
            self.clearGrid()
            if self.args.grid_size > 1:
                self.setGrid(self.args.grid_size)
    def clearGuides(self):
        sys.stderr.write("Clearing all guides...\n")
        self.font.guide = fontforge.layer()
    def clearHorizontalGuides(self):
        keepContours = []
        recreate = False
        for contour in self.font.guide:
            if len(contour) == 2 and contour[0].y == contour[1].y:
                recreate = True
            else:
                keepContours += [contour]
        if recreate:
            sys.stderr.write("Clearing horizontal guides...\n")
            self.font.guide = fontforge.layer()
            for contour in keepContours:
                self.font.guide += contour
    def clearVerticalGuides(self):
        keepContours = []
        recreate = False
        for contour in self.font.guide:
            if len(contour) == 2 and contour[0].x == contour[1].x:
                recreate = True
            else:
                keepContours += [contour]
        if recreate:
            sys.stderr.write("Clearing vertical guides...\n")
            self.font.guide = fontforge.layer()
            for contour in keepContours:
                self.font.guide += contour
    def clearGrid(self):
        sys.stderr.write("Clearing grid...\n")
        return
    def setHorizontalGuides(self, guides):
        if guides[0] == '+':
            guides = guides[1:]
        else:
            self.clearHorizontalGuides()
        guides = self.parseGuides(guides, 'y')
        for guide in guides:
            contour = fontforge.contour()
            contour.moveTo(-1024, guide['y'])
            contour.lineTo(5120, guide['y'])
            contour.closed = False
            name = guide['name']
            if name:
                contour['name'] = name
            self.font.guide += contour
    def setVerticalGuides(self, guides):
        if guides[0] == '+':
            guides = guides[1:]
        else:
            self.clearVerticalGuides()
        guides = self.parseGuides(guides, 'x')
        for guide in guides:
            contour = fontforge.contour()
            contour.moveTo(guide['x'], -font.descent - 1024)
            contour.lineTo(guide['x'], font.ascent + 1024)
            contour.closed = False
            name = guide['name']
            if name:
                contour['name'] = name
            self.font.guide += contour
    def setGrid(self, gridSize):
        return
    def parseGuides(self, guides, coordinateName):
        result = []
        guides = guides.split(',')
        for guide in guides:
            y = None
            name = None
            match = re.match(r'(-?\d+)(?:=(.+))?$', guide)
            if match:
                y = int(match.group(1))
                name = match.group(2)
                result += [{ coordinateName: y, 'name': name }]
        return result
    def noHintsOn(self):
        for value in self.args.no_hints_on:
            value = value.strip()
            specs = re.split(r'\s+|\s*,\s*', value)
            for spec in specs:
                match = re.search(hexRangeRegex, spec)
                if not match:
                    raise Exception('invalid no-hints-on spec: %s' % spec)
                lo = match.group('from')
                hi = match.group('to')
                if lo: lo = int(lo, 16)
                if hi: hi = int(hi, 16)
                if not hi: hi = lo
                if lo > hi: [lo, hi] = [hi, lo]
                for codepoint in range(lo, hi + 1):
                    self.noHintsOnCodepoint(codepoint)
    def noHintsOnCodepoint(self, codepoint):
        if not codepoint in self.font:
            print('no glyph at %d' % codepoint)
            return
        print("Removing hints on U+%04X" % codepoint)
        glyph = self.font[codepoint]
        glyph.dhints = ()
        glyph.hhints = ()
        glyph.vhints = ()
        glyph.manualHints = True
    def setWidth(self, width):
        if not self.width:
            return
        for glyph in self.font.glyphs():
            glyph.width = self.width

parser = argparse.ArgumentParser(
    description = 'Various font manipulation and conversion tasks'
)
parser.add_argument('source_filename',      help = 'Use \'NEW\' to start from a new blank font.')
parser.add_argument('dest_filename')
parser.add_argument('--no-hints',           action = 'store_true')
parser.add_argument('--omit-instructions',  action = 'store_true')
parser.add_argument('--encode-unicode',     action = 'store_true')
parser.add_argument('--line-height',        type = float, help = 'line height to use for final metrics, e.g., 1.2')
parser.add_argument('--font-name',                        help = 'specify a new FontName')
parser.add_argument('--family-name',                      help = 'specify a new FamilyName')
parser.add_argument('--full-name',                        help = 'specify a new FullName')
parser.add_argument('--version',                          help = 'set version number')
parser.add_argument('--sfnt-revision',      type = float, help = 'set sfnt revision number (e.g., 2020.03)')
parser.add_argument('--no-os2-vendor',      action = 'store_true')
parser.add_argument('--em',                 type = int,   help = 'specify em units     (e.g., 1024 or 2048)')
parser.add_argument('--ascent',             type = int,   help = 'specify font ascent  (e.g., 819 or 1638)')
parser.add_argument('--descent',            type = int,   help = 'specify font descent (e.g., 205 or 410)')
parser.add_argument('--italic-angle',       type = float, help = 'specify italic angle (e.g., -11.25)')
parser.add_argument('--underline-position', type = int,   help = 'specify underline position')
parser.add_argument('--underline-height',   type = int,   help = 'specify underline height')
parser.add_argument('--clear-guides',       action = 'store_true')
parser.add_argument('--horizontal-guides',  type = str,   help = 'specify horizontal guides')
parser.add_argument('--vertical-guides',    type = str,   help = 'specify vertical guides')
parser.add_argument('--grid-size',          type = int,   help = 'specify grid width/height (e.g., 16)')
parser.add_argument('--no-hints-on',        action = 'append', type = str, help = 'remove hints for these glyphs (e.g., U+2500 or U+2500-U+25FF)')
parser.add_argument('--width',              type = int,   help = 'specify width for all glyphs')

# glyph.dhints, a tuple
# glyph.hhints, a tuple
# glyph.manualHints, a "don't autohint" flag.
# glyph.vhints, a tuple
# glyph.addHint(...)
# glyph.autoHint()

# --grid=16|clear
# --hguides=clear|<guides>|+<guides>
# --vguides=clear|<guides>|+<guides>
# <guides>:
#     --hguides='0,48,96'
#     --hguides='0,48=baseline,96'
#     --hguides='1152,1200=cap,1248'
#     --hguides='768,816=ex,864'
#     --vguides='456,512,568'
#     --vguides='144,200,256,312'
#     --vguides='712,768,824,880'
# --generate-ascii-blanks (32..126)
# --generate-latin-1-blanks (160..255)

args = parser.parse_args()
ffs = FontForgeScript(args)
ffs.run()

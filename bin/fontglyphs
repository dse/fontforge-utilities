#!/usr/bin/env fontforge
# -*- mode: python; coding: utf-8 -*-
import fontforge
import argparse
import unicodedata
import re

def main():
    global args
    parser = argparse.ArgumentParser(description="list glyphs in a font")
    parser.add_argument('filenames', nargs='+')
    parser.add_argument('-d', '--decimal', dest='base', default=10, const=10, action='store_const')
    parser.add_argument('-x', '--hexadecimal', dest='base', const=16, action='store_const')
    parser.add_argument('-u', '--unicode', dest='base', const='U', action='store_const')
    parser.add_argument('-U', '--names', '--unicode-names', action='store_true')
    parser.add_argument('-A', '--alt', '--altuni', action='store_true')
    args = parser.parse_args()
    for filename in args.filenames:
        if len(args.filenames) > 1:
            write("=== %s ===" % filename)
        font = fontforge.open(filename)
        for glyph in font.glyphs():
            write(codepoint_fmt(glyph.unicode))
            write("  %-32s" % glyph.glyphname)
            if args.names:
                codepoint = glyph.unicode
                if codepoint < 0:
                    name = glyph.glyphname
                    name = re.sub(r'(?<=.)\..*$', '', name)
                    write(" => %s => " % name)
                    new_codepoint = fontforge.unicodeFromName(name)
                    write(" %s => " % new_codepoint)
                    if new_codepoint >= 0:
                        codepoint = new_codepoint
                if codepoint >= 0:
                    write('  ' + codepoint_fmt(codepoint))
                    try:
                        write("  " + unicodedata.name(chr(codepoint)))
                    except:
                        pass
            write("\n")
            if args.alt and glyph.altuni:
                for altuni in glyph.altuni:
                    codepoint = altuni[0]
                    write("ALT:    ")
                    write("  %-32s" % "-")
                    write("  " + codepoint_fmt(codepoint))
                    if args.names and codepoint > -1:
                        try:
                            write("  " + unicodedata.name(chr(codepoint)))
                        except:
                            pass
                    write("\n")

def write(str):
    print(str, end='')

def codepoint_fmt(codepoint):
    global args
    if codepoint == -1:
        if args.base == 'U':
            return "-       "
        return "       -"
    if codepoint < 0:
        if args.base == 'U':
            return "%-8s" % ("<%d>" % codepoint)
        return "%8s" % ("<%d>" % codepoint)
    if args.base == 'U':
        return "%-8s" % u(codepoint)
    if args.base == 16:
        return "%8s" % x(codepoint)
    if args.base == 10:
        return "%8d" % codepoint

def u(codepoint):
    if codepoint < 0:
        return "%d" % codepoint # don't print -1 as hex
    return "U+%04X" % codepoint

def x(codepoint):
    if codepoint < 0:
        return "%d" % codepoint # don't print -1 as hex
    return "0x%04x" % codepoint

main()

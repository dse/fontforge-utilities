#!/usr/bin/env -S fontforge -quiet
# -*- mode: python; coding: utf-8 -*-

import os
import fontforge
import argparse

verbose_level = 0
quiet_level = 0
is_verbose = False
is_quiet = False

class VerboseAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        global verbose_level, quiet_level, is_verbose, is_quiet
        verbose_level += 1
        is_verbose = True
        is_quiet = False

class QuietAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        global verbose_level, quiet_level, is_verbose, is_quiet
        quiet_level += 1
        is_verbose = False
        is_quiet = True

def main():
    global args
    parser = argparse.ArgumentParser(description='will your font(s) be detected as monospace?')
    parser.add_argument('filenames', nargs='+')
    parser.add_argument('-v', '--verbose', action=VerboseAction, help='more output, can be repeated')
    args = parser.parse_args()

    output_level = verbose_level if is_verbose else -quiet_level if is_quiet else 0
    exit_code = 0
    for filename in args.filenames:
        if not check_if_font_is_mono(filename):
            exit_code = 1

def check_if_font_is_mono(filename):
    demerits = []
    caveats = []
    font = fontforge.open(filename)
    if font.os2_panose[3] != 9:
        demerits.append("incorrect value for fourth panose param (should be 9), so not monospace")
    width_counts = {}
    for glyph in font.glyphs():
        width = glyph.width
        if width in width_counts:
            width_counts[width] += 1
        else:
            width_counts[width] = 1
    if len(width_counts) < 1:
        demerits.append("no glyphs, so not monospace")
    if len(width_counts) == 1:
        pass                    # :-)
    elif fc_check_if_font_is_mono(font):
        caveats.append("glyph widths may vary slightly or font is FC_DUAL")
    else:
        demerits.append("glyph widths not unique, so not monospace")
    if len(demerits):
        for demerit in demerits:
            print("%s: DEMERIT - %s" % (filename, demerit))
    if len(caveats):
        for caveat in caveats:
            print("%s: CAVEAT - %s" % (filename, caveat))
    return len(demerits) == 0

def fc_check_if_font_is_mono(font):
    advances = []
    for glyph in font.glyphs():
        advance_is_new = True
        advance = glyph.width
        if advance == 0:
            continue
        for existing_advance in advances:
            if fc_approximately_equal(advance, existing_advance):
                advance_is_new = False
                break
        if advance_is_new:
            advances.append(advance)
            if len(advances) > 2:
                break
    return (len(advances) == 1 or
            (len(advances) == 2 and
             fc_approximately_equal(max(advances[0], advances[1]),
                                    min(advances[0], advances[1]) * 2)))

def fc_approximately_equal(x, y):
    return abs(x - y) * 33 <= max(abs(x), abs(y))

main()

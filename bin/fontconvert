#!/usr/bin/env -S fontforge -quiet
# -*- mode: python; coding: utf-8 -*-
import os, re, argparse
def main():
    global args
    parser = argparse.ArgumentParser(description="convert fonts from one format to another")
    parser.add_argument('source_filename')
    parser.add_argument('dest_filename', nargs = '+', default = [], help = "extension determines format/format; can also be, e.g., \".ttf\")")
    args = parser.parse_args()

    font_names = fontforge.fontsInFile(args.source_filename)
    if len(font_names) > 1:
        for font_name in font_names:
            print("Loading %s (%s)" % (args.source_filename, font_name))
            font = fontforge.open('%s(%s)' % (args.source_filename, font_name))
            for dest_filename in args.dest_filename:
                if re.search(r'^\.[A-Za-z0-9]+$', dest_filename):
                    dest_filename = font_name + dest_filename
                else:
                    dirname = os.path.dirname(dest_filename)
                    basename = os.path.basename(dest_filename)
                    (baseroot, baseext) = os.path.splitext(basename)
                    if baseroot in font_names:
                        dest_filename = dirname + font_name + baseext
                    else:
                        dest_filename = dirname + baseroot + "@" + font_name + baseext
                if dest_filename.endswith('.sfd'):
                    print("Saving %s" % dest_filename)
                    font.save(dest_filename)
                else:
                    print("Generating %s" % dest_filename)
                    font.generate(dest_filename)
    else:
        print("Loading %s" % args.source_filename)
        font = fontforge.open(args.source_filename)
        for dest_filename in args.dest_filename:
            if re.search(r'^\.[A-Za-z0-9]+$', dest_filename):
                (source_base, source_ext) = os.path.splitext(args.source_filename)
                dest_filename = source_base + dest_filename
            if dest_filename.endswith('.sfd'):
                print("Saving %s" % dest_filename)
                font.save(dest_filename)
            else:
                print("Generating %s" % dest_filename)
                font.generate(dest_filename)
main()
